// Generated by CoffeeScript 1.9.3
(function() {
  $(function() {
    var adjustContentTo, calcScale, init, originalX, originalY, prefix, sanitizeValues, setZoom, settings, viewportValues, waitForFinalEvent, windowX, windowY;
    settings = {
      spread: true,
      zoom: 1,
      viewport: null,
      resize: false,
      container: '#LB-Buch-Content-Def-1',
      origin: {
        x: 0,
        y: 0
      }
    };
    prefix = (function() {
      var dom, pre, styles;
      styles = window.getComputedStyle(document.documentElement, '');
      pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];
      dom = 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1];
      return {
        dom: dom,
        lowercase: pre,
        css: '-' + pre + '-',
        js: pre[0].toUpperCase() + pre.substr(1)
      };
    })();
    waitForFinalEvent = (function() {
      var timers;
      timers = {};
      return function(callback, ms, uniqueId) {
        if (!uniqueId) {
          uniqueId = 'Don\'t call this twice without a uniqueId';
        }
        if (timers[uniqueId]) {
          clearTimeout(timers[uniqueId]);
        }
        timers[uniqueId] = setTimeout(callback, ms);
      };
    })();
    $(window).on({
      'resize': function() {
        settings.resize = true;
        return waitForFinalEvent((function() {
          settings.resize = false;
          setZoom();
        }), 500, 'some unique string');
      }
    });
    sanitizeValues = function(val) {
      switch (typeof val) {
        case 'string':
          val = val.match(/\d/g) ? parseInt(val, 10) : $.trim(val);
      }
      return val;
    };
    viewportValues = (function() {
      var arr, obj;
      obj = {};
      arr = $('meta[name=viewport]').attr('content').split(',');
      arr.map(function(val) {
        var attr, prop, vals;
        vals = val.split('=');
        prop = sanitizeValues(vals[0]);
        attr = sanitizeValues(vals[1]);
        return obj[prop] = attr;
      });
      settings.viewport = obj;
      return obj;
    })();
    windowX = function() {
      return window.innerWidth;
    };
    windowY = function() {
      return window.innerHeight;
    };
    originalX = function() {
      return settings.viewport.width;
    };
    originalY = function() {
      return settings.viewport.height;
    };
    calcScale = function() {
      return {
        x: windowX() / originalX(),
        y: windowY() / originalY()
      };
    };
    adjustContentTo = function(scale) {
      var CSSproperties, i, len, props, scaleCSS, str;
      scaleCSS = {};
      CSSproperties = [prefix.css + "transform:scale(" + scale + ")", prefix.css + "transform-origin:" + settings.origin.x + " " + settings.origin.y];
      for (i = 0, len = CSSproperties.length; i < len; i++) {
        str = CSSproperties[i];
        props = str.split(':');
        scaleCSS[props[0]] = props[1];
      }
      console.log(scaleCSS);
      return $(settings.container).css(scaleCSS);
    };
    setZoom = function() {
      var fit, fitX, fitY, multiplier;
      multiplier = calcScale();
      fitX = originalX() * multiplier.x;
      fitY = originalY() * multiplier.y;
      fit = fitY < fitX ? multiplier.y : multiplier.x;
      return adjustContentTo(fit);
    };
    init = function() {
      return setZoom();
    };
    return init();
  });

}).call(this);
