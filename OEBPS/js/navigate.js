// Generated by CoffeeScript 1.9.3
var Reader,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Reader = window.Reader != null ? window.Reader : window.Reader = {};

Reader.Navigate = (function() {
  function Navigate(settings, currentPos, currentIdx, currentSection, increment, currentOffset, elem) {
    this.settings = settings;
    this.currentPos = currentPos;
    this.currentIdx = currentIdx;
    this.currentSection = currentSection;
    this.increment = increment;
    this.currentOffset = currentOffset;
    this.elem = elem != null ? elem : $(this.settings.innerContainer);
    this.goToChapter = bind(this.goToChapter, this);
    this.goToEnd = bind(this.goToEnd, this);
    this.goToStart = bind(this.goToStart, this);
    this.goToIdx = bind(this.goToIdx, this);
    this.goToPrev = bind(this.goToPrev, this);
    this.goToNext = bind(this.goToNext, this);
    this.animateElem = bind(this.animateElem, this);
    this.setIncrement = bind(this.setIncrement, this);
    this.getIncrement = bind(this.getIncrement, this);
    this.getCurrentSection = bind(this.getCurrentSection, this);
    this.setCurrentSection = bind(this.setCurrentSection, this);
    this.getCurrentIdx = bind(this.getCurrentIdx, this);
    this.setCurrentIdx = bind(this.setCurrentIdx, this);
    this.getCurrentPos = bind(this.getCurrentPos, this);
    this.setCurrentPos = bind(this.setCurrentPos, this);
  }

  Navigate.prototype.setCurrentPos = function(pos) {
    return this.currentPos = pos;
  };

  Navigate.prototype.getCurrentPos = function() {
    return this.currentPos;
  };

  Navigate.prototype.getCurrentOffset = function() {
    return this.currentOffset;
  };

  Navigate.prototype.setCurrentIdx = function(idx) {
    return this.currentIdx = idx;
  };

  Navigate.prototype.getCurrentIdx = function() {
    return this.currentIdx;
  };

  Navigate.prototype.setCurrentSection = function(section) {
    return this.currentSection = section;
  };

  Navigate.prototype.getCurrentSection = function() {
    return this.currentSection;
  };

  Navigate.prototype.getIncrement = function() {
    return this.increment;
  };

  Navigate.prototype.setIncrement = function(inc) {
    return this.increment = inc;
  };

  Navigate.prototype.animateElem = function(pos) {
    var obj;
    console.log(this.elem);
    return this.elem.css((
      obj = {},
      obj[Reader.Utils.prototype.prefix.css + "transform"] = "translateX(" + pos + "px)",
      obj
    ));
  };

  Navigate.prototype.goToNext = function(pos) {
    var desiredPos, inc, totalLength;
    desiredPos = this.getIncrement();
    totalLength = 100000;
    inc = this.getCurrentOffset() + desiredPos > totalLength ? totalLength : desiredPos;
    return this.animateElem(inc);
  };

  Navigate.prototype.goToPrev = function(pos) {
    var desiredPos, inc;
    desiredPos = this.getIncrement();
    inc = this.getCurrentOffset() - desiredPos < 0 ? 0 : desiredPos;
    return this.animateElem(-inc);
  };

  Navigate.prototype.goToIdx = function(idx) {};

  Navigate.prototype.goToStart = function() {
    this.animateElem(0);
    this.setCurrentPos(0);
    this.setCurrentIdx(0);
    return this.setCurrentSection(0);
  };

  Navigate.prototype.goToEnd = function() {
    var totalLength;
    totalLength = 100000;
    return this.animateElem(totalLength);
  };

  Navigate.prototype.goToChapter = function(idx) {};

  return Navigate;

})();
