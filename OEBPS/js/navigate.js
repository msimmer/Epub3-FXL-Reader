// Generated by CoffeeScript 1.9.3
(function() {
  var Reader,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Reader = window.Reader != null ? window.Reader : window.Reader = {};

  Reader.Navigate = (function(superClass) {
    extend(Navigate, superClass);

    function Navigate(settings, currentPos, currentIdx, currentSection, increment, elem1) {
      this.settings = settings;
      this.currentPos = currentPos;
      this.currentIdx = currentIdx;
      this.currentSection = currentSection;
      this.increment = increment;
      this.elem = elem1 != null ? elem1 : $(this.settings.innerContainer);
      this.goToChapter = bind(this.goToChapter, this);
      this.goToEnd = bind(this.goToEnd, this);
      this.goToStart = bind(this.goToStart, this);
      this.goToIdx = bind(this.goToIdx, this);
      this.goToPrev = bind(this.goToPrev, this);
      this.goToNext = bind(this.goToNext, this);
      this.animateElem = bind(this.animateElem, this);
      this.getPrevPos = bind(this.getPrevPos, this);
      this.getNextPos = bind(this.getNextPos, this);
      this.setIncrement = bind(this.setIncrement, this);
      this.getIncrement = bind(this.getIncrement, this);
      this.getCurrentSection = bind(this.getCurrentSection, this);
      this.setCurrentSection = bind(this.setCurrentSection, this);
      this.getCurrentIdx = bind(this.getCurrentIdx, this);
      this.setCurrentIdx = bind(this.setCurrentIdx, this);
      this.getCurrentPos = bind(this.getCurrentPos, this);
      this.setCurrentPos = bind(this.setCurrentPos, this);
      this.getTotalLen = bind(this.getTotalLen, this);
      this.setTotalLen = bind(this.setTotalLen, this);
    }

    Navigate.prototype.setTotalLen = function(len) {
      return this.totalLen = len;
    };

    Navigate.prototype.getTotalLen = function(len) {
      return -this.totalLen;
    };

    Navigate.prototype.setCurrentPos = function(pos) {
      return this.currentPos = pos;
    };

    Navigate.prototype.getCurrentPos = function() {
      return this.currentPos;
    };

    Navigate.prototype.setCurrentIdx = function(idx) {
      return this.currentIdx = idx;
    };

    Navigate.prototype.getCurrentIdx = function() {
      return this.currentIdx;
    };

    Navigate.prototype.setCurrentSection = function(section) {
      return this.currentSection = section;
    };

    Navigate.prototype.getCurrentSection = function() {
      return this.currentSection;
    };

    Navigate.prototype.getIncrement = function() {
      return this.increment;
    };

    Navigate.prototype.setIncrement = function(inc) {
      return this.increment = inc;
    };

    Navigate.prototype.getNextPos = function() {
      var elem, nextIdx, pos;
      nextIdx = this.getCurrentIdx() + 1;
      elem = $("[data-idx=" + nextIdx + "]");
      if (elem.length) {
        pos = ~~elem.find("[data-page-offset]").attr("data-page-offset");
        return -pos;
      }
    };

    Navigate.prototype.getPrevPos = function() {
      var elem, pos, prevIdx;
      prevIdx = this.getCurrentIdx() - 1;
      elem = $("[data-idx=" + prevIdx + "]");
      if (elem.length) {
        pos = ~~elem.find("[data-page-offset]").attr("data-page-offset");
        return -pos;
      }
    };

    Navigate.prototype.animateElem = function(pos) {
      var obj;
      return this.elem.css((
        obj = {},
        obj[Reader.Utils.prototype.prefix.css + "transform"] = "translateX(" + pos + "px)",
        obj
      ));
    };

    Navigate.prototype.goToNext = function() {
      var desiredPos, idx, totalLength;
      desiredPos = this.getNextPos();
      totalLength = this.getTotalLen();
      if (desiredPos > totalLength) {
        this.animateElem(desiredPos);
        idx = this.getCurrentIdx();
        return this.setCurrentIdx(idx + 1);
      }
    };

    Navigate.prototype.goToPrev = function() {
      var desiredPos, idx;
      desiredPos = this.getPrevPos();
      if (desiredPos <= 0) {
        this.animateElem(desiredPos);
        idx = this.getCurrentIdx();
        return this.setCurrentIdx(idx - 1);
      }
    };

    Navigate.prototype.goToIdx = function(idx) {};

    Navigate.prototype.goToStart = function() {
      this.animateElem(0);
      this.setCurrentPos(0);
      this.setCurrentIdx(0);
      return this.setCurrentSection(0);
    };

    Navigate.prototype.goToEnd = function() {
      var dest, inc, totalLength;
      totalLength = this.getTotalLen();
      inc = this.getIncrement();
      dest = totalLength - inc;
      return this.animateElem(dest);
    };

    Navigate.prototype.goToChapter = function(idx) {};

    return Navigate;

  })(Reader);

}).call(this);
