// Generated by CoffeeScript 1.9.3
(function() {
  var Reader;

  Reader = window.Reader != null ? window.Reader : window.Reader = {};

  Reader.Utils = (function() {
    function Utils() {}

    Utils.prototype.prefix = (function() {
      var dom, pre, styles;
      styles = window.getComputedStyle(document.documentElement, '');
      pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];
      dom = 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1];
      return {
        dom: dom,
        lowercase: pre,
        css: '-' + pre + '-',
        js: pre[0].toUpperCase() + pre.substr(1)
      };
    })();

    Utils.prototype.waitForFinalEvent = (function() {
      var timers;
      timers = {};
      return function(callback, ms, uniqueId) {
        if (!uniqueId) {
          uniqueId = 'Don\'t call this twice without a uniqueId';
        }
        if (timers[uniqueId]) {
          clearTimeout(timers[uniqueId]);
        }
        timers[uniqueId] = setTimeout(callback, ms);
      };
    })();

    Utils.prototype.getComputedTranslateY = function(obj) {
      var mat, style, transform;
      if (!window.getComputedStyle) {
        return;
      }
      style = getComputedStyle(obj);
      transform = style.transform || style.webkitTransform || style.mozTransform;
      mat = transform.match(/^matrix3d\((.+)\)$/);
      if (mat) {
        return parseFloat(mat[1].split(', ')[13]);
      }
      mat = transform.match(/^matrix\((.+)\)$/);
      if (mat) {
        return parseFloat(mat[1].split(', ')[5]);
      } else {
        return 0;
      }
    };

    Utils.prototype.getComputedTranslateX = function(obj) {
      var mat, style, transform;
      if (!window.getComputedStyle) {
        return;
      }
      style = getComputedStyle(obj);
      transform = style.transform || style.webkitTransform || style.mozTransform;
      mat = transform.match(/^matrix3d\((.+)\)$/);
      if (mat) {
        return parseFloat(mat[1].split(', ')[12]);
      }
      mat = transform.match(/^matrix\((.+)\)$/);
      if (mat) {
        return parseFloat(mat[1].split(', ')[4]);
      } else {
        return 0;
      }
    };

    return Utils;

  })();

}).call(this);
