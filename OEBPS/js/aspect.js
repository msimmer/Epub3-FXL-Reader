// Generated by CoffeeScript 1.9.3
var Aspect;

Aspect = (function() {
  var reader;

  reader = window.Reader;

  function Aspect(settings) {
    this.settings = settings;
  }

  Aspect.sanitizeValues = function(val) {
    switch (typeof val) {
      case 'string':
        val = val.match(/\d/g) ? parseInt(val, 10) : $.trim(val);
    }
    return val;
  };

  Aspect.prototype.windowX = function() {
    return this.windowDimensions().x;
  };

  Aspect.prototype.windowY = function() {
    return this.windowDimensions().y;
  };

  Aspect.prototype.originalX = function() {
    return this.settings.viewport.width;
  };

  Aspect.prototype.originalY = function() {
    return this.settings.viewport.height;
  };

  Aspect.prototype.calcScale = function() {
    return {
      x: this.windowX() / this.originalX(),
      y: this.windowY() / this.originalY()
    };
  };

  Aspect.prototype.windowDimensions = function() {
    var b, d, e, w, x, y;
    w = window;
    d = document;
    e = d.documentElement;
    b = d.getElementsByTagName('body')[0];
    x = w.innerWidth || e.clientWidth || b.clientWidth;
    y = w.innerHeight || e.clientHeight || b.clientHeight;
    return {
      x: x,
      y: y
    };
  };

  Aspect.prototype.adjustMainContentTo = function(scale, cb) {
    var CSSproperties, j, len1, props, scaleCSS, str, windowDims;
    scaleCSS = {};
    windowDims = this.windowDimensions();
    CSSproperties = [Reader.Utils.prototype.prefix.css + "transform:scale(" + scale + ")", Reader.Utils.prototype.prefix.css + "transform-origin:" + this.settings.origin.x + " " + this.settings.origin.y, "height:" + (windowDims.y / scale), "width:" + (windowDims.x / scale)];
    for (j = 0, len1 = CSSproperties.length; j < len1; j++) {
      str = CSSproperties[j];
      props = str.split(':');
      scaleCSS[props[0]] = props[1];
    }
    $(this.settings.container).css(scaleCSS);
    if (cb) {
      return cb();
    }
  };

  Aspect.prototype.getScale = function() {
    var fit, maxX, maxY, multiplier, windowDims;
    multiplier = this.calcScale();
    windowDims = this.windowDimensions();
    maxX = this.originalX() * multiplier.x;
    maxY = this.originalY() * multiplier.y;
    fit = null;
    if (maxY >= windowDims.y) {
      reader.App.prototype.log("  Scaling content: Y > X, choosing Y.");
      fit = multiplier.y;
    } else if (maxX > windowDims.x) {
      reader.App.prototype.log("  Scaling content: X > Y, choosing X.");
      fit = multiplier.x;
    } else {
      reader.App.prototype.log("  Scaling content: defaulting to Y");
      fit = multiplier.y;
    }
    return {
      fitX: multiplier.x,
      fitY: multiplier.y,
      fit: fit
    };
  };

  Aspect.prototype.adjustArticlePosition = function() {
    var $sections, len, pageHeight, pageWidth, wx, wy;
    pageWidth = this.getScale().fit * this.originalX() + this.settings.gutter;
    pageHeight = this.getScale().fit * this.originalY();
    $sections = $('article.spread section');
    len = $sections.length - 1;
    wx = pageWidth / this.getScale().fit;
    wy = this.windowY() / this.getScale().fit;
    return $sections.each(function(i) {
      var bgPos, idx, obj, scaledIncrement, sectionPos, windowIncrement;
      idx = $(this).closest('article').attr('data-idx');
      scaledIncrement = i * wx;
      windowIncrement = i * pageWidth;
      sectionPos = (
        obj = {},
        obj[Reader.Utils.prototype.prefix.css + "transform"] = "translateX(" + scaledIncrement + "px)",
        obj.position = 'absolute',
        obj.width = wx,
        obj.height = wy,
        obj
      );
      bgPos = {
        left: windowIncrement,
        width: pageWidth,
        height: pageHeight
      };
      $(this).css(sectionPos).attr('data-page-offset', scaledIncrement);
      $('.background[data-background-for="' + idx + '"]').css(bgPos);
      if (i === len) {
        return $(document).trigger('reader.articlesPositioned');
      }
    });
  };

  Aspect.prototype.setZoom = function(cb) {
    var scale;
    scale = this.getScale();
    return this.adjustMainContentTo(scale.fit, (function(_this) {
      return function() {
        $(document).trigger('reader.pagesFit');
        if (cb) {
          return cb();
        }
      };
    })(this));
  };

  return Aspect;

})();

if (window.Reader == null) {
  window.Reader = {};
}

window.Reader.Aspect = Aspect;
