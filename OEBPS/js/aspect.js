// Generated by CoffeeScript 1.9.3
<<<<<<< HEAD
(function() {
  var Aspect;

  Aspect = (function() {
    function Aspect(settings) {
      this.settings = settings;
=======
var Aspect;

Aspect = (function() {
  function Aspect(settings) {
    this.settings = settings;
  }

  Aspect.sanitizeValues = function(val) {
    switch (typeof val) {
      case 'string':
        val = val.match(/\d/g) ? parseInt(val, 10) : $.trim(val);
>>>>>>> dd854c4ee057fb2546a520b2d238d7e786243655
    }
    return val;
  };

<<<<<<< HEAD
    Aspect.sanitizeValues = function(val) {
      switch (typeof val) {
        case 'string':
          val = val.match(/\d/g) ? parseInt(val, 10) : $.trim(val);
      }
      return val;
    };
=======
  Aspect.prototype.getViewportValues = function() {
    var arr, obj;
    obj = {};
    arr = $('meta[name=viewport]').attr('content').split(',');
    arr.map((function(_this) {
      return function(val) {
        var attr, prop, vals;
        vals = val.split('=');
        prop = _this.sanitizeValues(vals[0]);
        attr = _this.sanitizeValues(vals[1]);
        return obj[prop] = attr;
      };
    })(this));
    this.settings.viewport = obj;
    return obj;
  };
>>>>>>> dd854c4ee057fb2546a520b2d238d7e786243655

  Aspect.prototype.windowX = function() {
    return window.innerWidth;
  };

  Aspect.prototype.windowY = function() {
    return window.innerHeight;
  };

  Aspect.prototype.originalX = function() {
    return this.settings.viewport.width;
  };

  Aspect.prototype.originalY = function() {
    return this.settings.viewport.height;
  };

  Aspect.prototype.calcScale = function() {
    return {
      x: this.windowX() / this.originalX(),
      y: this.windowY() / this.originalY()
    };
  };

  Aspect.prototype.adjustMainContentTo = function(scale, cb) {
    var CSSproperties, j, len, props, scaleCSS, str;
    console.log('adjustMainContentTo');
    scaleCSS = {};
    CSSproperties = [Reader.Utils.prototype.prefix.css + "transform:scale(" + scale + ")", Reader.Utils.prototype.prefix.css + "transform-origin:" + this.settings.origin.x + " " + this.settings.origin.y];
    for (j = 0, len = CSSproperties.length; j < len; j++) {
      str = CSSproperties[j];
      props = str.split(':');
      scaleCSS[props[0]] = props[1];
    }
    $(this.settings.container).css(scaleCSS);
    if (cb) {
      return cb();
    }
  };

<<<<<<< HEAD
    Aspect.prototype.adjustMainContentTo = function(scale, cb) {
      var CSSproperties, j, len, props, scaleCSS, str;
      scaleCSS = {};
      CSSproperties = [Reader.Utils.prototype.prefix.css + "transform:scale(" + scale + ")", Reader.Utils.prototype.prefix.css + "transform-origin:" + this.settings.origin.x + " " + this.settings.origin.y];
      for (j = 0, len = CSSproperties.length; j < len; j++) {
        str = CSSproperties[j];
        props = str.split(':');
        scaleCSS[props[0]] = props[1];
      }
      $(this.settings.container).css(scaleCSS);
      if (cb) {
        return cb();
      }
    };

    Aspect.prototype.getScale = function() {
      var fit, fitX, fitY, multiplier;
      multiplier = this.calcScale();
      fitX = this.originalX() * multiplier.x;
      fitY = this.originalY() * multiplier.y;
      fit = fitY < fitX ? multiplier.y : multiplier.x;
      return {
        fitX: fitX,
        fitY: fitY,
        fit: fit
      };
    };

    Aspect.prototype.adjustArticlePosition = function() {
      var pageWidth;
      pageWidth = this.getScale().fit * this.originalX() + this.settings.gutter;
      $('section').each(function(i) {
        var obj1, sectionPos;
        sectionPos = (
          obj1 = {},
          obj1[Reader.Utils.prototype.prefix.css + "transform"] = "translateX(" + (i * pageWidth) + "px)",
          obj1
        );
        return $(this).css(sectionPos);
      });
      return $(document).trigger('reader.articlesPositioned');
    };

    Aspect.prototype.setZoom = function(cb) {
      var scale;
      scale = this.getScale();
      return this.adjustMainContentTo(scale.fit, (function(_this) {
        return function() {
          $(document).trigger('reader.pagesFit');
          if (cb) {
            return cb();
          }
        };
      })(this));
    };
=======
  Aspect.prototype.adjustArticlePosition = function() {
    var sectionWidth;
    sectionWidth = this.originalX() * this.calcScale().x;
    $('section').each(function(i) {
      var obj1, sectionPos;
      sectionPos = (
        obj1 = {},
        obj1[Reader.Utils.prototype.prefix.css + "transform"] = "translateX(" + (i * sectionWidth) + "px)",
        obj1
      );
      return $(this).css(sectionPos);
    });
    return $(document).trigger('reader.articlesPositioned');
  };

  Aspect.prototype.setZoom = function(cb) {
    var fit, fitX, fitY, multiplier;
    multiplier = this.calcScale();
    fitX = this.originalX() * multiplier.x;
    fitY = this.originalY() * multiplier.y;
    fit = fitY < fitX ? multiplier.y : multiplier.x;
    return this.adjustMainContentTo(fit, function() {
      $(document).trigger('reader.pagesFit');
      if (cb) {
        return cb();
      }
    });
  };

  return Aspect;
>>>>>>> dd854c4ee057fb2546a520b2d238d7e786243655

})();

if (window.Reader == null) {
  window.Reader = {};
}

<<<<<<< HEAD
  if (window.Reader == null) {
    window.Reader = {};
  }

  window.Reader.Aspect = Aspect;

}).call(this);
=======
window.Reader.Aspect = Aspect;
>>>>>>> dd854c4ee057fb2546a520b2d238d7e786243655
